from django.shortcuts import render
from rest_framework import viewsets, generics
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.authentication import TokenAuthentication
from .models import Sensor, SensorData, Alertlog, SystemMode
from .serializers import SensorSerializer, SensorDataSerializer, AlertlogSerializer, SystemModeSerializer
import paho.mqtt.publish as publish
import json
import logging

# Set up logging
logger = logging.getLogger(__name__)

class SensorViewSet(viewsets.ModelViewSet):
    queryset = Sensor.objects.all()
    serializer_class = SensorSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def perform_create(self, serializer):
        logger.debug(f"Creating sensor with data: {self.request.data}")
        serializer.save()

class SensorDataViewSet(viewsets.ModelViewSet):
    queryset = SensorData.objects.all()
    serializer_class = SensorDataSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

class AlertlogViewSet(viewsets.ModelViewSet):
    queryset = Alertlog.objects.all()
    serializer_class = AlertlogSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

class ModeView(generics.UpdateAPIView):
    queryset = SystemMode.objects.all()
    serializer_class = SystemModeSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def update(self, request, *args, **kwargs):
        logger.debug(f"Mode update request: {request.data}")
        mode = request.data.get('mode')
        if mode not in ['Stay', 'Disarm', 'Away']:
            return Response({"error": "Invalid mode"}, status=400)
        system_mode, _ = SystemMode.objects.get_or_create(id=1, defaults={'mode': 'Disarm'})
        system_mode.mode = mode
        system_mode.save()
        publish.single(
            "security/mode",
            payload=json.dumps({"mode": mode}),
            hostname="localhost",
            port=1883,
            auth={"username": "mqttuser", "password": "mqttpass123"}
        )
        return Response({"status": "Mode set", "mode": mode})